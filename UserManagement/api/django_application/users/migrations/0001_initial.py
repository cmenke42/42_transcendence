# Generated by Django 5.0.6 on 2024-06-02 02:05

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Will not be used as nickname in the game.', max_length=254, unique=True, verbose_name='email')),
                ('is_active', models.BooleanField(default=False, help_text='Status of the user account', verbose_name='active')),
                ('is_admin', models.BooleanField(default=False, help_text='User can log into admin page?.', verbose_name='admin status')),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, help_text='Date when the user account was created', verbose_name='account creation')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verif_token', models.CharField(default='', max_length=128)),
                ('email_verif_token_expires', models.DateTimeField(blank=True, null=True)),
                ('user_recovery_code', models.CharField(default='', max_length=128)),
                ('user_recovery_code_expires', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
    ]
